interface UserConfig {
    /**
     * Manually set base in OpenAPI config instead of inferring from server value
     */
    base?: string;
    /**
     * The selected HTTP client (fetch, xhr, node or axios)
     * @default 'fetch'
     */
    client?: 'angular' | 'axios' | 'fetch' | 'node' | 'xhr';
    /**
     * Run in debug mode?
     * @default false
     */
    debug?: boolean;
    /**
     * Export enum definitions?
     * @default false
     */
    enums?: 'javascript' | 'typescript' | false;
    /**
     * Generate an experimental build?
     * @default false
     */
    experimental?: boolean;
    /**
     * Generate core client classes?
     * @default true
     */
    exportCore?: boolean;
    /**
     * Generate models?
     * @default true
     */
    exportModels?: boolean | string;
    /**
     * Generate services?
     * @default true
     */
    exportServices?: boolean | string;
    /**
     * Process output folder with formatter?
     * @default true
     */
    format?: boolean;
    /**
     * The relative location of the OpenAPI spec
     */
    input: string | Record<string, unknown>;
    /**
     * Process output folder with linter?
     * @default false
     */
    lint?: boolean;
    /**
     * Custom client class name
     */
    name?: string;
    /**
     * Use operation ID to generate operation names?
     * @default true
     */
    operationId?: boolean;
    /**
     * The relative location of the output directory
     */
    output: string;
    /**
     * Service name postfix
     * @default 'Service'
     */
    postfixServices?: string;
    /**
     * Path to custom request file
     */
    request?: string;
    /**
     * Export JSON schemas?
     * @default true
     */
    schemas?: boolean;
    /**
     * Define shape of returned value from service calls
     * @default 'body'
     */
    serviceResponse?: 'body' | 'generics' | 'response';
    /**
     * Output Date instead of string for the format "date-time" in the models
     * @default false
     */
    useDateType?: boolean;
    /**
     * Use options or arguments functions
     * @default true
     */
    useOptions?: boolean;
    /**
     * Write the files to disk (true or false)
     * @default true
     */
    write?: boolean;
}

interface Enum {
    'x-enum-description'?: string;
    'x-enum-varname'?: string;
    description?: string;
    value: string | number;
}
interface OperationError {
    code: number;
    description: string;
}
interface OperationParameter extends Model {
    in: 'path' | 'query' | 'header' | 'formData' | 'body' | 'cookie';
    prop: string;
    mediaType: string | null;
}
interface OperationParameters extends Pick<Model, '$refs' | 'imports'> {
    parameters: OperationParameter[];
    parametersBody: OperationParameter | null;
    parametersCookie: OperationParameter[];
    parametersForm: OperationParameter[];
    parametersHeader: OperationParameter[];
    parametersPath: OperationParameter[];
    parametersQuery: OperationParameter[];
}
interface OperationResponse extends Model {
    in: 'response' | 'header';
    code: number;
}
interface Operation extends OperationParameters {
    deprecated: boolean;
    description: string | null;
    errors: OperationError[];
    method: 'DELETE' | 'GET' | 'HEAD' | 'OPTIONS' | 'PATCH' | 'POST' | 'PUT';
    /**
     * Method name. Methods contain the request logic.
     */
    name: string;
    path: string;
    responseHeader: string | null;
    results: OperationResponse[];
    /**
     * Service name, might be without postfix. This will be used to name the
     * exported class.
     */
    service: string;
    summary: string | null;
}
interface Schema {
    default?: unknown;
    exclusiveMaximum?: boolean;
    exclusiveMinimum?: boolean;
    format?: 'binary' | 'boolean' | 'byte' | 'date-time' | 'date' | 'double' | 'float' | 'int32' | 'int64' | 'password' | 'string';
    isDefinition: boolean;
    isNullable: boolean;
    isReadOnly: boolean;
    isRequired: boolean;
    maximum?: number;
    maxItems?: number;
    maxLength?: number;
    maxProperties?: number;
    minimum?: number;
    minItems?: number;
    minLength?: number;
    minProperties?: number;
    multipleOf?: number;
    pattern?: string;
    uniqueItems?: boolean;
}
interface Model extends Schema {
    /**
     * **Experimental.** Contains list of original refs so they can be used
     * to access the schema from anywhere instead of relying on string name.
     * This allows us to do things like detect type of ref.
     */
    $refs: string[];
    base: string;
    deprecated?: boolean;
    description: string | null;
    enum: Enum[];
    enums: Model[];
    export: 'all-of' | 'any-of' | 'array' | 'const' | 'dictionary' | 'enum' | 'generic' | 'interface' | 'one-of' | 'reference';
    imports: string[];
    link: Model | null;
    name: string;
    properties: Model[];
    template: string | null;
    type: string;
}
interface Service extends Pick<Model, '$refs' | 'imports' | 'name'> {
    operations: Operation[];
}

interface Client {
    enumNames: string[];
    models: Model[];
    server: string;
    services: Service[];
    version: string;
}

/**
 * Generate the OpenAPI client. This method will read the OpenAPI specification and based on the
 * given language it will generate the client, including the typed models, validation schemas,
 * service layer, etc.
 * @param userConfig {@link UserConfig} passed to the `createClient()` method
 */
declare function createClient(userConfig: UserConfig): Promise<Client>;
/**
 * Type helper for openapi-ts.config.ts, returns {@link UserConfig} object
 */
declare function defineConfig(config: UserConfig): UserConfig;

export { type UserConfig, createClient, defineConfig };
