import { createClient } from "@hey-api/openapi-ts";
import { print } from "./print.mjs";
import path from "path";
import { createSource } from "./createSource.mjs";
import { defaultOutputPath, requestsOutputPath } from "./constants.mjs";
import { safeParseNumber } from "./common.mjs";
export async function generate(options, version) {
    const openApiOutputPath = path.join(options.output ?? defaultOutputPath, requestsOutputPath);
    // loop through properties on the options object
    // if the property is a string of number then convert it to a number
    // if the property is a string of boolean then convert it to a boolean
    const formattedOptions = Object.entries(options).reduce((acc, [key, value]) => {
        const typedKey = key;
        const typedValue = value;
        const parsedNumber = safeParseNumber(typedValue);
        if (!isNaN(parsedNumber)) {
            acc[typedKey] = parsedNumber;
        }
        else if (value === "true") {
            acc[typedKey] = true;
        }
        else if (value === "false") {
            acc[typedKey] = false;
        }
        return acc;
    }, options);
    const config = {
        ...formattedOptions,
        output: openApiOutputPath,
        useOptions: true,
        exportCore: true,
        exportModels: true,
        exportServices: true,
        write: true,
    };
    await createClient(config);
    const source = await createSource({
        outputPath: openApiOutputPath,
        version,
        serviceEndName: "Service", // we are hard coding this because changing the service end name was depreciated in @hey-api/openapi-ts
    });
    await print(source, formattedOptions);
}
